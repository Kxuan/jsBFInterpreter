// Generated by CoffeeScript 1.9.1
(function() {
  var BrainfuckCompileTimeException, BrainfuckException, BrainfuckInterpreter, BrainfuckInterpreterInstance, BrainfuckNoDataException, BrainfuckRuntimeException,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BrainfuckInterpreterInstance = (function() {
    var backward, compiler_map, decrease, enter, forward, increase, input, leave, operator_map, output;

    function BrainfuckInterpreterInstance() {}

    forward = function() {
      this.dp++;
      return true;
    };

    backward = function() {
      this.dp--;
      return true;
    };

    increase = function() {
      var base, name;
      if ((base = this.memory)[name = this.dp] == null) {
        base[name] = 0;
      }
      if (this.memory[this.dp] === 0xff) {
        this.memory[this.dp] = 0;
      } else {
        this.memory[this.dp]++;
      }
      return true;
    };

    decrease = function() {
      var base, name;
      if ((base = this.memory)[name = this.dp] == null) {
        base[name] = 0;
      }
      if (this.memory[this.dp] === 0) {
        this.memory[this.dp] = 0xff;
      } else {
        this.memory[this.dp]--;
      }
      return true;
    };

    output = function() {
      return this.output_cache.push(this.memory[this.dp]);
    };

    input = function() {
      if (this.input_cache.length === 0) {
        this.status = 'wait_input';
        return false;
      } else {
        this.memory[this.dp] = this.input_cache.shift();
        return true;
      }
    };

    enter = function() {
      if (this.memory[this.dp] === 0) {
        this.ip = this.jump_cache[this.ip];
      }
      return true;
    };

    leave = function() {
      if (this.memory[this.dp] !== 0) {
        this.ip = this.jump_cache[this.ip];
      }
      return true;
    };

    compiler_map = {
      '>': function() {
        return 0;
      },
      '<': function() {
        return 1;
      },
      '+': function() {
        return 2;
      },
      '-': function() {
        return 3;
      },
      '.': function() {
        return 4;
      },
      ',': function() {
        return 5;
      },
      '[': function() {
        this.loop_position_cache.push(this.code.length);
        return 6;
      },
      ']': function() {
        var pos;
        if (this.loop_position_cache.length === 0) {
          this.status = 'exception';
          return false;
        } else {
          pos = this.loop_position_cache.pop();
          this.jump_cache[pos] = this.code.length;
          this.jump_cache[this.code.length] = pos;
        }
        return 7;
      }
    };

    operator_map = {
      0: forward,
      1: backward,
      2: increase,
      3: decrease,
      4: output,
      5: input,
      6: enter,
      7: leave
    };

    BrainfuckInterpreterInstance.prototype.status = 'halt';

    BrainfuckInterpreterInstance.prototype.exception = '';

    BrainfuckInterpreterInstance.prototype.code = [];

    BrainfuckInterpreterInstance.prototype.ip = 0;

    BrainfuckInterpreterInstance.prototype.memory = [];

    BrainfuckInterpreterInstance.prototype.dp = 0;

    BrainfuckInterpreterInstance.prototype.input_cache = [];

    BrainfuckInterpreterInstance.prototype.output_cache = [];

    BrainfuckInterpreterInstance.prototype.jump_cache = [];

    BrainfuckInterpreterInstance.prototype.loop_position_cache = [];

    BrainfuckInterpreterInstance.prototype.reset = function() {
      this.status = 'halt';
      this.exception = '';
      this.code = [];
      this.ip = 0;
      this.memory = [];
      this.dp = 0;
      this.input_cache = [];
      this.output_cache = [];
      this.jump_cache = [];
      return this.loop_position_cache = [];
    };

    BrainfuckInterpreterInstance.prototype.launch = function() {
      if (this.status !== 'halt') {
        return false;
      }
      if (this.loop_position_cache.length !== 0) {
        this.status = 'exception';
        return false;
      }
      this.status = 'running';
      return true;
    };

    BrainfuckInterpreterInstance.prototype.step = function() {
      if (this.status !== 'running') {
        return false;
      }
      if (this.ip >= this.code.length) {
        this.status = 'halt';
        return false;
      }
      if (operator_map[this.code[this.ip]].apply(this)) {
        ++this.ip;
        return true;
      } else {
        return false;
      }
    };

    BrainfuckInterpreterInstance.prototype.writeCode = function(char) {
      var opcode;
      if (this.status !== 'halt' || typeof compiler_map[char] !== 'function') {
        return false;
      }
      opcode = compiler_map[char].apply(this);
      if (opcode === false) {
        return false;
      }
      this.code.push(opcode);
      return true;
    };

    BrainfuckInterpreterInstance.prototype.writeData = function(data) {
      var e, i, index, len;
      switch (typeof data) {
        case 'number':
          this.input_cache.push(data);
          break;
        case 'string':
          for (index in data) {
            this.input_cache.push(data.charCodeAt(index));
          }
          break;
        case 'object':
          if (data instanceof Array) {
            for (i = 0, len = data.length; i < len; i++) {
              e = data[i];
              this.writeData(e);
            }
          } else {
            return false;
          }
          break;
        default:
          return false;
      }
      if (this.status === 'wait_input') {
        this.status = 'running';
      }
      return true;
    };

    return BrainfuckInterpreterInstance;

  })();

  window.BrainfuckException = BrainfuckException = (function() {
    function BrainfuckException(msg) {
      this.msg = msg;
    }

    return BrainfuckException;

  })();

  window.BrainfuckCompileTimeException = BrainfuckCompileTimeException = (function(superClass) {
    extend(BrainfuckCompileTimeException, superClass);

    function BrainfuckCompileTimeException() {
      return BrainfuckCompileTimeException.__super__.constructor.apply(this, arguments);
    }

    return BrainfuckCompileTimeException;

  })(BrainfuckException);

  window.BrainfuckRuntimeException = BrainfuckRuntimeException = (function(superClass) {
    extend(BrainfuckRuntimeException, superClass);

    function BrainfuckRuntimeException() {
      return BrainfuckRuntimeException.__super__.constructor.apply(this, arguments);
    }

    return BrainfuckRuntimeException;

  })(BrainfuckException);

  window.BrainfuckNoDataException = BrainfuckNoDataException = (function(superClass) {
    extend(BrainfuckNoDataException, superClass);

    function BrainfuckNoDataException() {
      return BrainfuckNoDataException.__super__.constructor.apply(this, arguments);
    }

    return BrainfuckNoDataException;

  })(BrainfuckException);

  window.BrainfuckInterpreter = BrainfuckInterpreter = (function() {
    var instance;

    instance = BrainfuckInterpreterInstance.prototype;

    BrainfuckInterpreter.prototype.inFn = prompt;

    BrainfuckInterpreter.prototype.outFn = console.info;

    BrainfuckInterpreter.prototype.getStatus = function() {
      return instance.status;
    };

    BrainfuckInterpreter.prototype.getException = function() {
      return instance.exception;
    };

    BrainfuckInterpreter.prototype.getInstructionPointer = function() {
      return instance.ip;
    };

    BrainfuckInterpreter.prototype.getCurrentInstruction = function() {
      return instance.code[instance.ip];
    };

    function BrainfuckInterpreter() {
      instance = new BrainfuckInterpreterInstance();
    }

    BrainfuckInterpreter.prototype.reset = function() {
      return instance.reset();
    };

    BrainfuckInterpreter.prototype.launch = function() {
      return instance.launch();
    };

    BrainfuckInterpreter.prototype.writeCode = function(code) {
      var char, i, index, len;
      for (index = i = 0, len = code.length; i < len; index = ++i) {
        char = code[index];
        if (!instance.writeCode(char) && 'halt' !== instance.status) {
          throw new BrainfuckCompileTimeException(instance.exception);
        }
      }
      return true;
    };

    BrainfuckInterpreter.prototype.step = function() {
      if (!instance.step()) {
        switch (instance.status) {
          case 'halt':
            return false;
          case 'running':
            return true;
          case 'exception':
            throw new BrainfuckRuntimeException(instance.exception);
            break;
          case 'wait_input':
            if (typeof this.inFn === 'function') {
              instance.writeData(this.inFn.call());
            } else {
              throw new BrainfuckNoDataException(instance.exception);
            }
            break;
          default:
            throw new BrainfuckRuntimeException('Illegal Status!');
        }
      } else {
        if (instance.output_cache.length) {
          this.outFn(this, instance.output_cache);
          instance.output_cache = [];
        }
      }
      return true;
    };

    BrainfuckInterpreter.prototype.run = function() {
      while (instance.step()) {
        ;
      }
      if (instance.output_cache.length) {
        this.outFn(this, instance.output_cache);
        instance.output_cache = [];
      }
      return true;
    };

    return BrainfuckInterpreter;

  })();

}).call(this);

//# sourceMappingURL=bf.js.map
