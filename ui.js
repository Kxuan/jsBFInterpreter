// Generated by CoffeeScript 1.9.1
(function() {
  var ui;

  ui = {
    el: {
      editor: '.editor',
      run: '.run',
      result: '.result',
      debug: {
        status: '.debug .status',
        ip: '.debug .ip',
        option: '.debug input[name="isDebug"]'
      }
    },
    interpreter: null,
    init: function() {
      this.interpreter = new BrainfuckInterpreter();
      this.interpreter.outFn = this.appendOutput.bind(this);
      return this.buildElement();
    },
    buildElement: function() {
      this.el = DOMGrab.grab(this.el);
      return this.el.run.addEventListener('click', this.doRun.bind(this));
    },
    doRun: function() {
      var ex;
      this.el.result.innerText = '';
      this.interpreter.reset();
      try {
        !this.interpreter.writeCode(this.el.editor.value);
      } catch (_error) {
        ex = _error;
        alert("Fail to write code.");
        return false;
      } finally {
        this.updateStatus();
      }
      if (!this.interpreter.launch()) {
        this.updateStatus();
        alert(this.interpreter.getException());
        return false;
      }
      if (this.el.debug.option.checked) {
        this.doStepByStep();
      } else {
        this.interpreter.run();
        this.updateStatus();
      }
      return false;
    },
    updateStatus: function() {
      this.el.debug.status.innerText = this.interpreter.getStatus();
      return this.el.debug.ip.innerText = this.interpreter.getInstructionPointer();
    },
    doStepByStep: function() {
      if (this.interpreter.step()) {
        setTimeout(this.doStepByStep.bind(this), 0);
      }
      return this.updateStatus();
    },
    appendOutput: function(itp, data_array) {
      var e, i, len;
      for (i = 0, len = data_array.length; i < len; i++) {
        e = data_array[i];
        this.el.result.innerText += String.fromCharCode(e);
      }
      return true;
    }
  };

  window.addEventListener('load', function() {
    return ui.init();
  });

}).call(this);

//# sourceMappingURL=ui.js.map
